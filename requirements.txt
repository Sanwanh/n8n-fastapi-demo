# ================================
# 市場分析報告系統 - Python 依賴套件
# Market Analysis Report System - Python Dependencies
# ================================

# 核心 Web 框架 Core Web Framework
fastapi==0.104.1                    # 現代、快速的 Web 框架
uvicorn[standard]==0.24.0           # ASGI 伺服器

# 資料驗證和序列化 Data Validation and Serialization  
pydantic[email]==2.5.0              # 資料驗證（包含 email 驗證）
email-validator==2.1.0              # 電子郵件驗證

# HTTP 客戶端 HTTP Client
requests==2.31.0                    # HTTP 請求庫
httpx==0.25.2                       # 異步 HTTP 客戶端（備用）

# 檔案處理 File Processing
python-multipart==0.0.6             # 多部分表單資料處理
aiofiles==23.2.1                    # 異步檔案操作

# 日期時間處理 Date and Time Handling
python-dateutil==2.8.2              # 日期解析和處理

# JSON 處理 JSON Processing  
orjson==3.9.10                      # 高效能 JSON 處理（可選）

# 設定管理 Configuration Management
python-dotenv==1.0.0                # 環境變數管理
pyyaml==6.0.1                       # YAML 配置檔案支援

# 日誌處理 Logging
loguru==0.7.2                       # 進階日誌處理（可選替代）

# 安全性 Security
cryptography==41.0.7                # 加密功能
passlib[bcrypt]==1.7.4              # 密碼雜湊（未來功能）

# 資料庫支援 Database Support（可選）
# SQLAlchemy==2.0.23                # ORM 框架
# alembic==1.12.1                   # 資料庫遷移
# asyncpg==0.29.0                   # PostgreSQL 異步驅動
# psycopg2-binary==2.9.9            # PostgreSQL 同步驅動

# 快取支援 Cache Support（可選）
# redis==5.0.1                      # Redis 客戶端
# aioredis==2.0.1                   # 異步 Redis 客戶端

# 監控和度量 Monitoring and Metrics（可選）
# prometheus-client==0.19.0         # Prometheus 度量
# psutil==5.9.6                     # 系統資源監控

# 測試框架 Testing Framework（開發用）
pytest==7.4.3                       # 測試框架
pytest-asyncio==0.21.1              # 異步測試支援
pytest-cov==4.1.0                   # 測試覆蓋率
httpx==0.25.2                       # 測試 HTTP 客戶端

# 開發工具 Development Tools
black==23.11.0                      # 程式碼格式化
isort==5.12.0                       # import 排序
flake8==6.1.0                       # 程式碼檢查
mypy==1.7.1                         # 型別檢查

# 文檔生成 Documentation
mkdocs==1.5.3                       # 文檔生成（可選）
mkdocs-material==9.4.8              # 美觀的文檔主題

# 效能分析 Performance Profiling（開發用）
# py-spy==0.3.14                    # Python 效能分析器
# memory-profiler==0.61.0           # 記憶體使用分析

# 資料處理 Data Processing（可選）
# pandas==2.1.3                     # 資料分析（如需要）
# numpy==1.25.2                     # 數值計算（如需要）

# 自然語言處理 Natural Language Processing（可選）
# nltk==3.8.1                       # 自然語言工具包
# textblob==0.17.1                  # 簡單的文字處理

# 排程任務 Scheduled Tasks（可選）
# celery==5.3.4                     # 分散式任務佇列
# redis==5.0.1                      # Celery 訊息代理

# 圖片處理 Image Processing（可選）
# Pillow==10.1.0                    # 圖片處理庫

# 匯出功能 Export Features（可選）
# openpyxl==3.1.2                   # Excel 檔案處理
# reportlab==4.0.7                  # PDF 生成

# 國際化 Internationalization（可選）
# Babel==2.13.1                     # 國際化和本地化

# WebSocket 支援 WebSocket Support（可選）
# websockets==12.0                  # WebSocket 支援

# 機器學習 Machine Learning（可選，高階功能）
# scikit-learn==1.3.2               # 機器學習庫
# joblib==1.3.2                     # 並行處理

# 資料視覺化 Data Visualization（可選）
# matplotlib==3.8.2                 # 圖表生成
# seaborn==0.13.0                   # 統計圖表

# ================================
# 系統相容性需求 System Compatibility Requirements
# ================================

# Python 版本需求: >= 3.11
# 作業系統: Linux, macOS, Windows
# 記憶體需求: 最少 256MB，建議 512MB
# 磁碟空間: 最少 100MB

# ================================
# 安裝說明 Installation Instructions
# ================================

# 1. 建立虛擬環境
# python -m venv venv
# source venv/bin/activate  # Linux/macOS
# venv\Scripts\activate     # Windows

# 2. 升級 pip
# pip install --upgrade pip

# 3. 安裝依賴套件
# pip install -r requirements.txt

# 4. 安裝可選依賴（根據需要）
# pip install -r requirements-optional.txt

# 5. 驗證安裝
# python -c "import fastapi, uvicorn, pydantic, requests; print('✅ 核心依賴安裝成功')"

# ================================
# 開發環境額外依賴 Development Environment Additional Dependencies
# ================================

# 建立 requirements-dev.txt 用於開發環境
# pip-tools==7.3.0                  # 依賴管理工具
# pre-commit==3.5.0                 # Git 提交前檢查
# bandit==1.7.5                     # 安全性檢查
# safety==2.3.5                     # 已知漏洞檢查

# ================================
# 生產環境優化 Production Environment Optimization
# ================================

# 建立 requirements-prod.txt 用於生產環境（移除開發工具）
# 生產環境建議使用：
# - 更嚴格的版本鎖定
# - 移除開發和測試相關套件
# - 添加效能優化套件

# 生產環境範例：
# fastapi==0.104.1
# uvicorn[standard]==0.24.0
# pydantic[email]==2.5.0
# requests==2.31.0
# python-dotenv==1.0.0
# cryptography==41.0.7

# ================================
# Docker 環境最佳化 Docker Environment Optimization
# ================================

# Docker 多階段建構建議：
# 1. 基礎映像：python:3.11-slim
# 2. 建構階段：安裝編譯依賴
# 3. 運行階段：僅包含運行時依賴

# ================================
# 依賴更新策略 Dependency Update Strategy
# ================================

# 1. 定期檢查更新
# pip list --outdated

# 2. 安全更新優先
# pip-audit  # 檢查已知漏洞

# 3. 測試相容性
# 在更新前先在開發環境測試

# 4. 版本鎖定
# 生產環境使用確切版本號

# ================================
# 故障排除 Troubleshooting
# ================================

# 常見問題解決方案：

# 1. 編譯錯誤（通常是 cryptography）
# 解決方案：安裝系統編譯工具
# Ubuntu/Debian: apt-get install build-essential libffi-dev
# CentOS/RHEL: yum install gcc gcc-c++ openssl-devel libffi-devel
# macOS: xcode-select --install
# Windows: Visual Studio Build Tools

# 2. 權限錯誤
# 解決方案：使用虛擬環境或 --user 標誌
# pip install --user -r requirements.txt

# 3. 網路問題
# 解決方案：使用國內鏡像源
# pip install -i https://pypi.tuna.tsinghua.edu.cn/simple/ -r requirements.txt

# 4. 版本衝突
# 解決方案：建立全新的虛擬環境
# rm -rf venv
# python -m venv venv
# source venv/bin/activate
# pip install -r requirements.txt

# ================================
# 效能最佳化建議 Performance Optimization Recommendations
# ================================

# 1. 使用 uvloop（Linux/macOS）
# uvloop==0.19.0

# 2. 使用 orjson 替代標準 json
# orjson==3.9.10

# 3. 啟用 gzip 壓縮
# 在 FastAPI 中配置中介軟體

# 4. 使用連接池
# httpx 已內建連接池

# ================================
# 安全性最佳實務 Security Best Practices
# ================================

# 1. 定期更新依賴
# pip list --outdated

# 2. 檢查已知漏洞
# pip-audit

# 3. 使用環境變數管理敏感資訊
# python-dotenv==1.0.0

# 4. 啟用 HTTPS
# uvicorn --ssl-keyfile --ssl-certfile

# ================================
# 監控和日誌 Monitoring and Logging
# ================================

# 1. 應用效能監控
# prometheus-client==0.19.0

# 2. 結構化日誌
# structlog==23.2.0

# 3. 錯誤追蹤
# sentry-sdk[fastapi]==1.38.0

# ================================
# 測試覆蓋率目標 Test Coverage Goals
# ================================

# 目標測試覆蓋率：
# - 核心功能：95%+
# - API 端點：90%+
# - 配置和工具：80%+
# - 整體目標：85%+

# 執行測試命令：
# pytest --cov=. --cov-report=html --cov-report=term

# ================================
# 版本相容性矩陣 Version Compatibility Matrix
# ================================

# Python 版本支援：
# - Python 3.11: ✅ 完全支援（推薦）
# - Python 3.10: ✅ 完全支援
# - Python 3.9:  ⚠️  基本支援
# - Python 3.8:  ❌ 不支援

# 作業系統支援：
# - Ubuntu 20.04+: ✅ 完全支援
# - CentOS 8+:     ✅ 完全支援
# - macOS 11+:     ✅ 完全支援
# - Windows 10+:   ✅ 完全支援

# ================================
# 部署環境建議 Deployment Environment Recommendations
# ================================

# 開發環境 (Development):
# - 安裝所有依賴（包括開發工具）
# - 啟用除錯模式
# - 使用檔案重載

# 測試環境 (Staging):
# - 僅安裝運行時依賴
# - 關閉除錯模式
# - 啟用詳細日誌

# 生產環境 (Production):
# - 最小依賴集合
# - 效能最佳化
# - 安全性強化

# ================================
# 自動化工具 Automation Tools
# ================================

# 依賴管理自動化：
# pip-tools compile requirements.in
# pip-tools sync

# 安全掃描自動化：
# bandit -r .
# safety check

# 程式碼品質自動化：
# black .
# isort .
# flake8
# mypy .

# ================================
# 容器化建議 Containerization Recommendations
# ================================

# Dockerfile 最佳實務：
# 1. 使用多階段建構
# 2. 快取依賴層
# 3. 非 root 使用者執行
# 4. 最小化映像大小

# Docker 映像大小目標：
# - 基礎映像：< 100MB
# - 含依賴：< 300MB
# - 完整應用：< 500MB

# ================================
# 說明文件 Documentation
# ================================

# API 文件：http://localhost:8089/docs
# 系統狀態：http://localhost:8089/health
# 配置資訊：查看 config.py
# 部署指南：查看 README.md